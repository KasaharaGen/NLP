Q: How to hide folders on a windows portable disk when viewed on mac os x I have a portable disk with NTFS format, and use it keeping my private data in windows xp. Recently I connected it to Macbook and found that the folders I set "hidden" in windows still can be seen and read in mac os x. So, what can I do to hide these folders in Mac OS X? Also, I want these folders still to be hidden if the disk connected to other Macs.

A: There are two ways I know of.
You can start the folder's name with a ".", as in ".folder". This will hide them on any Mac, though other Windows can see them.
Or you can use the Terminal command "chflags hidden ~/Documents/folder", replacing that place with the path to whichever folder it is you want to hide. But I don't think this would hide them when connected to another Mac.
You might want to look into using an encryption service like TrueCrypt.

A: The simple answer is that macs will read NTFS disks since Mac OS X 10.3 Panther and later.
The default behavior doesn't hide any files that NTFS has marked as "hidden". You could theoretically try to install software on all your macs to ensure they respect this hidden attribute (Tuxera makes such software)
The same problem will happen when you take your "hidden" files to any Linux or Unix
This sort of "security by obscurity" can be useful to put something out of sight, but you will need to encrypt these files more strongly to hide them from other OS that don't abide by the Windows convention to not show certain files.
Macs have the same problem - the hidden attribute for HFS+ filesystems doesn't translate to other OS. Macs do follow the Unix convention to automatically "hide" files that start with a .
Perhaps you could rename your files to start with a . and also do whatever you currently do to make them be hidden on NTFS.
That would keep them hidden on Macs and Windows alike.

A: The easiest way would be to add a period (.) to the front of the filename - this will hide it in the Finder.
You could also run this in terminal: chflags hidden path/to/file but I'm not sure if this will work on an NTFS formatted volume, as I've not tried it on one.
