Q: Multiple simultaneous wifi connections With the release of airdrop it is apparent that my WiFi network card is capable of making more than one network connection.  Are there any apps, documentation, command line tools, etc. for managing multiple wireless connection on my mac.
in a nut shell can I get my single wireless nic to act like two wireless nics?
I am asking about this because I have applications on my iPad that can only communicate with my macbook via WiFi (apple doesn't allow hard wired transmission of data for most apps).  Right now my laptop can either talk to the internet or my iPad(network im on blocks everything but internet access so my macbook and ipad can't talk on that network).  It would be great if my laptop could connect to both since it seems the hardware is capable.
I poked around a bit more and it looks like its pretty simple to add a vlan on the wired interface but there isn't an option in the gui to set one up for the wireless.  Using the ifconfig commands from this page I have managed to get a vlan for the wireless interface now but i'm not sure how to use a wireless interface from the terminal.  
I was also able to modify my preferences.plist as described by bmasterswizzle and have the virtual wireless interface in my system settings. Unfortunately I'm missing something because I can ping the virtual interface from that machine but I can't ping the virtual interface from other systems on the network.  
PING 10.0.0.114 (10.0.0.114): 56 data bytes
ping: sendto: No route to host
Request timeout for icmp_seq 0

I'm inching my way closer but I think there are some routing issues I need to address.  I'm not really an expert on more complicated networking setups.

A: If you have a couple of computers kicking around to test AirDrop on, you can open a terminal on each machine and enter something like 'ifconfig -a' which will list all your networking interface cards.  I'm not near a Mac or Unix box to show, but what you will see is a network interface that might be called say "en0" (Ethernet0) which is a physycal interface (may be wifi, or cabled) and a further one called "en0:0" which is a logical interface that piggybacks on top of the physycal interface.  In this way you can run multiple virtual interfaces using just one physical one, and this is how AirDrop works.  It is possible to manually create these interfaces yourself, and "multihome" your mac by having one interface say on a 192.168 address, and the other on say a 172.16 address, thus allowing it to talk to 2 networks at a time.  It was always relatively straightforward on cabled interfaces, but I am not sure how tricky it would be (from a hardware support viewpoint) with wireless connections, but it's clearly possible in some way.  See this question and answer for more details, but in short you need to be familiar with such terminal commands as ifconfig, netstat, route etc.
Use the Airdrop network to access a computer?

A: Finder is the primary app for building up the peer to peer network interface on Mac OS X Lion.
You can use netstat or the Network Utility to see the IPv6 routing that is set up for recognizing another airdrop mac.
fe80::%p2p1/64                          link#9                  UCI            p2p1
ff01::%p2p1/32                          link#9                  UmCI           p2p1
ff02::%p2p1/32                          link#9                  UmCI           p2p1

Over time, the mac will drop p2p1 and make p2p2 and so on. You can use tcpdump and other commands to see real traffic live on these multicast interfaces (just like en0 and en1). 
The Display multicast information option in Network Utility / Netstat seems to give you the best details on the p2p n interfaces.
Link-layer Multicast Group Memberships
Group                   Link-layer Address  Netif
33:33:0:0:0:1           <none>              p2p2
33:33:0:0:0:fb          <none>              p2p2
33:33:e2:e0:8a:33       <none>              p2p2
33:33:ff:4d:90:7e       <none>              p2p2
33:33:0:0:0:1           <none>              p2p2
33:33:0:0:0:fb          <none>              p2p2
33:33:e2:e0:8a:33       <none>              p2p2
33:33:ff:4d:90:7e       <none>              p2p2

IPv6 Multicast Group Memberships
Group                   Link-layer Address  Netif
ff01::1%p2p2            33:33:0:0:0:1       p2p2
ff02::1%p2p2            33:33:0:0:0:1       p2p2
ff02::fb%p2p2           33:33:0:0:0:fb      p2p2
ff02::2:e2e0:8a33%p2p2  33:33:e2:e0:8a:33   p2p2
ff02::1:ff4d:907e%p2p2  33:33:ff:4d:90:7e   p2p2

p2p2:
    inet6 fe80::1025:ff:fe4d:907e
    mldv2 flags=2<> rv 2 qi 125 qri 10 uri 3
        group ff01::1%p2p2 mode exclude
            mcast-macaddr 33:33:00:00:00:01
        group ff02::1%p2p2 mode exclude
            mcast-macaddr 33:33:00:00:00:01
        group ff02::fb%p2p2 mode exclude
            mcast-macaddr 33:33:00:00:00:fb
        group ff02::2:e2e0:8a33%p2p2 mode exclude
            mcast-macaddr 33:33:e2:e0:8a:33
        group ff02::1:ff4d:907e%p2p2 mode exclude
            mcast-macaddr 33:33:ff:4d:90:7e


The real trick will be jail breaking your iOS device to perform similar changes since iOS apps (that are following the App Store rules) don't get access to the networking hardware but instead just use the API Apple has provided. 
Again, you can already get network connectivity using bluetooth so perhaps that might be easier to accomplish your data transfer assuming you can't let the iOS devices just join the same WiFi network as the Mac and bypass needing to hack something resembling AirDrop. It's hard to tell specifically what you are asking since no actual apps or specific tasks have been listed in the question.
