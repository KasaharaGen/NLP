Q: What apps/programs/daemons on OS X use my ~/.ssh/id_rsa* keys? I recently started using Git with GitHub and thus discovered that I already have a generated pair of SSH keys, public and private. This leads me to ask: what applications/programs/daemons on my Mac might have caused this keypair to be created? I've never used SSH to log in to another machine.

A: Amusingly, your own question includes the answer. GitHub for Mac uses Git via SSH, and will automatically generate unprotected SSH key pairs (e.g. no passphrase) in order to push/pull contents between the remote repo and your local ones.

A: The program to create SSH key pairs is ssh-keygen. 
Enabling the SSH daemon in the Sharing preference pane does not create a key pair for a user in ~/.ssh/ The SSH daemon only creates a SSH host key pair in /etc/ssh_host*_key*
If you haven't used ssh-keygen to create the keys, maybe some other program did it for you. I don't know which one does that but I haven't used git.
As for using the keys, every program that uses SSH can use the keys. Some, like ssh, use the keys automatically, in some, like Cyberduck (SFTP), you have to select the key file manually.

A: To be honest the question is a little bit huge. Your ssh keys could have been generated if you activated the sshd (Remote Login) from the sharing preference pane; as to what could have used (or uses them), itâ€™s any program (like Git, Subversion, SFTP, etc) that requires ssh access. Not sure exactly which one could have generated for you, but you can always remove them and see what fails (save a backup!).

A: Break out 
fs_usage(1)

or
opensnoop(1m)

Both of these commands have options to watch a directory, or a path.  Open a terminal and , well, watch ~/.ssh . See who actually accesses that path.  If you find a program that is accessing that path illicitly, then tell us all.  Please.
